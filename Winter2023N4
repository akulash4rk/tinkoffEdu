import Foundation

var countOfMotivation = 2
var countOfBricks = 11
var startArrayOfMotivation = [1,2, 3, 11]
var startArrayOfBool = [false, false, false, false, false]
var startIndex = 0
var minDays = Int.max


func mainFunc(startIndex: Int, arrayOfMotivation: [Int], countOfBricks: Int, arrayOfBool: [Bool], days: Int) -> Int {
    var localCountOfBricks = countOfBricks
    var localArrayOfMotivation = arrayOfMotivation
    var localArrayOfBool = arrayOfBool
    var counter = 0
    if localArrayOfBool[startIndex] == false {
        //print("SI", startIndex)
        // print(localArrayOfBool)
        
//        print(localCountOfBricks)
        
        localArrayOfBool[startIndex] = true
        localCountOfBricks =  localCountOfBricks - localArrayOfMotivation[startIndex]
//        print(localArrayOfBool)
//        print(localArrayOfMotivation)
  //      print("d", days)
        
        
        //    for i in 0..<localArrayOfBool.count {
        //        if localArrayOfBool[i] == true {
        //            counter += 1
        //        }
        //    }
        //    if counter == localArrayOfBool.count {
        //        return -1
        //    }
        
        localArrayOfBool[startIndex] = true
        
        
        if localCountOfBricks == 0 {
   //         print("WOHO!")
            minDays = min(minDays, days)
            return 0
        }
        if localCountOfBricks < 0
        {
            return -1
        }
        
        if (localCountOfBricks > 0) {
            for i in 0..<localArrayOfMotivation.count {
                if localArrayOfMotivation[i] - 1 >= 0{
                    localArrayOfMotivation[i] -= 1
                }
            }
            
            callerMain(arrayOfMotivation: localArrayOfMotivation, countOfBricks: localCountOfBricks, arrayOfBool:localArrayOfBool, days: days)
            
            callerMain(arrayOfMotivation: startArrayOfMotivation, countOfBricks: localCountOfBricks, arrayOfBool: startArrayOfBool, days: days + 1)
        }
    }
    return -1
    }


func callerMain(arrayOfMotivation: [Int], countOfBricks: Int, arrayOfBool: [Bool], days: Int) {
    for i in 0..<arrayOfMotivation.count {
        if (arrayOfBool[i] == false) && (arrayOfMotivation[i] != 0)  {

        mainFunc(startIndex: i, arrayOfMotivation: arrayOfMotivation, countOfBricks: countOfBricks, arrayOfBool: arrayOfBool, days: days)
        }
    }
}

callerMain(arrayOfMotivation: startArrayOfMotivation, countOfBricks: countOfBricks, arrayOfBool: startArrayOfBool, days: 0)



if minDays == Int.max {
    print(-1)
}
else
{
    print(minDays+1)
}
